name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test the Firmware
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo into workspace directory
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Ruby - Bundler
        id: cache-ruby
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Install CMock
        run: |
          cd Tests/CMock
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        if: steps.cache-ruby.outputs.cache-hit != 'true'

      - name: Create and Run the tests
        run: |
          make -f Makefile.tests clean PRJ_DIR=${{ github.workspace }}
          make -f Makefile.tests PRJ_DIR=${{ github.workspace }}
          bash ${{ github.workspace }}/build/test/test_runner.sh

  build:
    name: Build Firmware
    runs-on: ubuntu-latest
    env:
      GCC_ARM_VERSION: "gcc-arm-none-eabi-9-2020-q2-update"
      GCC_ARM_PATH: "/home/runner/gcc-arm-none-eabi-9-2020-q2-update"
    steps:

      - name: Checkout current repo into workspace directory
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache GNU Arm Embedded Toolchain
        id: cache-gcc-arm
        uses: actions/cache@v2
        with:
          path: ${{ env.GCC_ARM_PATH }}
          key: ${{ runner.os }}-gcc-arm-${{ env.GCC_ARM_VERSION }}

      - name: Install GNU Arm Embedded Toolchain
        shell: bash
        run: |
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/${{ env.GCC_ARM_VERSION }}-x86_64-linux.tar.bz2
          tar xf ${{ env.GCC_ARM_VERSION }}-x86_64-linux.tar.bz2
          rm -f ${{ env.GCC_ARM_VERSION }}-x86_64-linux.tar.bz2
          mv ${{ env.GCC_ARM_VERSION }} ${{ env.GCC_ARM_PATH }}
        if: steps.cache-gcc-arm.outputs.cache-hit != 'true'

      - name: Add GNU Arm Embedded Toolchain to PATH
        run: echo "${{ env.GCC_ARM_PATH }}/bin" >> $GITHUB_PATH

      - name: Build the firmware
        run: make
